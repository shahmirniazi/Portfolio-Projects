1)
i:
SELECT COUNT(*) 
FROM attribute

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

ii:
SELECT COUNT(*) 
FROM business

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

iii:
SELECT COUNT(*) 
FROM category

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

iv: 
SELECT COUNT(*) 
FROM checkin

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

v:
SELECT COUNT(*) 
FROM elite_years

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

vi:
SELECT COUNT(*) 
FROM friend

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

vii:
SELECT COUNT(*) 
FROM hours

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

viii:
SELECT COUNT(*) 
FROM photo

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

ix:
SELECT COUNT(*) 
FROM review

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

x:
SELECT COUNT(*) 
FROM tip

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

xi:
SELECT COUNT(*) 
FROM user

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

Q2: 
i: SELECT count(distinct id) 
FROM business
ANSWER: 10000

ii: SELECT count(distinct business_id) 
FROM hours
ANSWER: 1562

iii: SELECT count(distinct business_id) 
FROM category
ANSWER: 2643

iv: SELECT count(distinct business_id) 
FROM attribute
ANSWER: 1115

v: SELECT count(distinct id), 
count(distinct business_id), 
count(distinct user_id) 
FROM review
ANSWER: Review = 10000 (id), 
8090 (business_id), 
9581 (user_id)

vi: SELECT count(distinct business_id) 
FROM checkin
ANSWER: 493

vii: SELECT count(distinct id), 
count(distinct business_id) 
FROM photo
ANSWER: Photo = 10000 (id), 6
493 (business_id)

viii: SELECT count(distinct business_id), 
count(distinct user_id) 
FROM tip
ANSWER: Tip = 3979 (business_id), 
537 (user_id)

ix: SELECT count(distinct id) 
FROM user
ANSWER: 10000 

x: SELECT count(distinct user_id) 
FROM friend
ANSWER: 11

xi: SELECT count(distinct user_id) 
FROM elite_years
ANSWER 2780


Q3: 
ANSWER: There are no columns with null values in the user table


SELECT count(*) - count(id),
   count(*) - count(name),
   count(*) - count(review_count),
   count(*) - count(yelping_since),
   count(*) - count(useful),
   count(*) - count(cool),
   count(*) - count(fans),
   count(*) - count(average_stars),
   count(*) - count(compliment_hot),
   count(*) - count(compliment_more),
   count(*) - count(compliment_profile),
   count(*) - count(compliment_cute),
   count(*) - count(compliment_list),
   count(*) - count(compliment_note),
   count(*) - count(compliment_plain),
   count(*) - count(compliment_cool),
   count(*) - count(compliment_funny),
   count(*) - count(compliment_writer),
   count(*) - count(compliment_photos)
FROM user


Q4: 
s:

Table: Review, Column: Stars
min: 1 max: 5 avg: 3.7082

SELECT min(stars), 
max(stars), 
avg(stars) 
FROM review


Table: Business, Column: Stars
min: 1 max: 5 avg: 3.6549

SELECT min(stars), 
max(stars), 
avg(stars) 
FROM business


Table: Tip, Column: Likes
min: 0 max: 2 avg: 0.0144

SELECT min(likes), 
max(likes), 
avg(likes) 
FROM tip


Table: Checkin, Column: Count
min: 1 max: 53 avg: 1.9414

SELECT min(count), 
max(count), 
avg(count) 
FROM checkin


Table: User, Column: Review_count
min: 0 max: 2000 avg: 24.2995

SELECT min(review_count), 
max(review_count), 
avg(review_count) 
FROM user


Q5:
SELECT sum(review_count) AS reviews_total, city
FROM business
GROUP BY city
ORDER BY reviews_total DESC

+---------------+-----------------+
| reviews_total | city            |
+---------------+-----------------+
|         82854 | Las Vegas       |
|         34503 | Phoenix         |
|         24113 | Toronto         |
|         20614 | Scottsdale      |
|         12523 | Charlotte       |
|         10871 | Henderson       |
|         10504 | Tempe           |
|          9798 | Pittsburgh      |
|          9448 | MontrÃ©al        |
|          8112 | Chandler        |
|          6875 | Mesa            |
|          6380 | Gilbert         |
|          5593 | Cleveland       |
|          5265 | Madison         |
|          4406 | Glendale        |
|          3814 | Mississauga     |
|          2792 | Edinburgh       |
|          2624 | Peoria          |
|          2438 | North Las Vegas |
|          2352 | Markham         |
|          2029 | Champaign       |
|          1849 | Stuttgart       |
|          1520 | Surprise        |
|          1465 | Lakewood        |
|          1155 | Goodyear        |
+---------------+-----------------+
(Output limit exceeded, 25 of 362 total rows shown)


Q6:
i:
SELECT stars AS star_rating, count(stars) AS count
FROM business
WHERE city='Avon'
GROUP BY stars

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+


ii:
SQL code used to arrive at answer:

SELECT stars AS star_rating, count(stars) AS count
FROM business
WHERE city='Beachwood'
GROUP BY stars

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+



Q7)
SQL code used to arrive at answer:

SELECT name, sum(review_count) AS total_count
FROM user
GROUP BY id
ORDER BY total_count DESC
LIMIT 3
	
+--------+-------------+
| name   | total_count |
+--------+-------------+
| Gerald |        2000 |
| Sara   |        1629 |
| Yuri   |        1339 |
+--------+-------------+

Q8)


SELECT range AS fans_range, 
       COUNT(*) AS num_user, 
       AVG(review_count) AS avg_num_review,     
       AVG(fans) AS avg_num_fans
FROM (SELECT CASE WHEN fans BETWEEN 0 AND 9 THEN '0 - 9'
                  WHEN fans BETWEEN 10 AND 99 THEN '10 - 99'
                  ELSE '100-1000' END AS range,
             review_count, 
             fans
      FROM user) AS subtable
GROUP BY subtable.range

+------------+----------+----------------+----------------+
| fans_range | num_user | avg_num_review |   avg_num_fans |
+------------+----------+----------------+----------------+
| 0 - 9      |     9690 |  15.0085655315 | 0.447265221878 |
| 10 - 99    |      294 |  283.326530612 |  25.5986394558 |
| 100-1000   |       16 |          891.5 |         189.75 |
+------------+----------+----------------+----------------+

Q9) 9. Are there more reviews with the word "love" or with the word "hate" in them?

Answer: "love"

SQL code used to arrive at answer:

SELECT reaction, count(*) count
FROM (
      SELECT CASE WHEN LOWER(text) LIKE '%love%' THEN 'love'
                  WHEN LOWER(text) LIKE '%hate%' THEN 'hate' 
                  ELSE NULL END AS reaction
      FROM review)
GROUP BY reaction
ORDER BY count DESC
Result:

+----------+-------+
| reaction | count |
+----------+-------+
|     None |  8042 |
|     love |  1780 |
|     hate |   178 |
+----------+-------+

Q10) 
SQL code used to arrive at answer:

SELECT name, fans
FROM user
ORDER BY fans DESC
LIMIT 10
Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

Q11) 
 "Las Vegas" and "Shopping" 

i. Do the two groups you chose to analyze have a different distribution of hours?

SQL code:

SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
            WHEN stars >= 2.0 THEN '2-3 stars'
            ELSE 'below 2' END AS 'STARS',               
       COUNT(DISTINCT business.id) AS id_count,            
       COUNT(hours) AS open_days_total,   -- number of opening days        
       COUNT(hours)*1.0 / COUNT(DISTINCT business.id)  AS open_days_avg
FROM ((business INNER JOIN hours ON business.id = hours.business_id)
     INNER JOIN category ON business.id = category.business_id)
WHERE city = 'Las Vegas' AND category.category ='Shopping'
GROUP BY STARS
Result:

+-----------+----------+-----------------+---------------+
| STARS     | id_count | open_days_total | open_days_avg |
+-----------+----------+-----------------+---------------+
| 2-3 stars |        2 |              13 |           6.5 |
| 4-5 stars |        2 |              12 |           6.0 |
+-----------+----------+-----------------+---------------+
There is no significant difference between opening days in the two groups.

ii. Do the two groups you chose to analyze have a different number of reviews?

SQL code:

SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
            WHEN stars >= 2.0 THEN '2-3 stars'
            ELSE 'below 2' END AS 'STARS',               
       COUNT(DISTINCT business.id) AS id_count,            
       SUM(review_count) AS review_count_total,
       SUM(review_count)*1.0/COUNT(DISTINCT business.id)  AS review_count_avg
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Las Vegas' AND category.category ='Shopping'
GROUP BY STARS
Result:

+-----------+----------+--------------------+------------------+
| STARS     | id_count | review_count_total | review_count_avg |
+-----------+----------+--------------------+------------------+
| 2-3 stars |        2 |                 17 |              8.5 |
| 4-5 stars |        2 |                 36 |             18.0 |
+-----------+----------+--------------------+------------------+
There is different in the total number of review between the two groups, 17 & 36. The group with 4~5 stars have doubled number of reivew than the other group.


iii. iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
            WHEN stars >= 2.0 THEN '2-3 stars'
            ELSE 'below 2' END AS 'STARS',
       business.neighborhood,
       business.address,
       business.postal_code
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Las Vegas' AND category.category ='Shopping'
ORDER BY STARS
Result:

+-----------+--------------+-----------------------------+-------------+
| STARS     | neighborhood | address                     | postal_code |
+-----------+--------------+-----------------------------+-------------+
| 2-3 stars | Southeast    | 3421 E Tropicana Ave, Ste I | 89121       |
| 2-3 stars | Eastside     | 3808 E Tropicana Ave        | 89121       |
| 4-5 stars |              | 1000 Scenic Loop Dr         | 89161       |
| 4-5 stars |              | 3555 W Reno Ave, Ste F      | 89118       |
+-----------+--------------+-----------------------------+-------------+
The shops with 2-3 stars are placed at Tropicana Ave., but the shops with higher stars are at a greater distance from eachother. 

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

i. Difference 1: Number of business. The number of open-business is bigger than closed one.

ii. Difference 2: Number of review & average of stars. Both of them in the open-business are bigger.

SQL code used for analysis:

SELECT is_open, 
       count(distinct business.id) num_business, 
       count(distinct review.id) num_review,
       avg(review.stars) avg_stars
FROM business
JOIN review ON business.id =  review.business_id
GROUP BY is_open
Result:

+---------+--------------+------------+---------------+
| is_open | num_business | num_review |     avg_stars |
+---------+--------------+------------+---------------+
|       0 |           61 |         71 | 3.64788732394 |
|       1 |          446 |        565 |  3.7610619469 |

+---------+--------------+------------+---------------+


3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
i. Indicate the type of analysis you chose to do:

What is the most successful category of business?

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

Among the categories, I calcalate the average of stars and the proportion of opening on each category. To get statistical reasoning, I only consider the set of category with more than 10 of business.

From the output, we can see that "Local Service", "Health & Medica", "Home Services", "Shopping", and "Beauty & Spas" are successful; they are getting better reviews and higher opening rate. However, "Bars", "Nightlife", and "Restaurants" have lower stars and close frequently.

iii. Output of your finished dataset:

+------------------------+--------------+-----------+------------+
| category               | num_business | avg_stars | avg_isopen |
+------------------------+--------------+-----------+------------+
| Local Services         |           12 |      4.21 |       0.83 |
| Health & Medical       |           17 |      4.09 |       0.94 |
| Home Services          |           16 |       4.0 |       0.94 |
| Shopping               |           30 |      3.98 |       0.83 |
| Beauty & Spas          |           13 |      3.88 |       0.92 |
| American (Traditional) |           11 |      3.82 |       0.73 |
| Food                   |           23 |      3.78 |       0.87 |
| Bars                   |           17 |       3.5 |       0.65 |
| Nightlife              |           20 |      3.48 |        0.6 |
| Restaurants            |           71 |      3.46 |       0.75 |
+------------------------+--------------+-----------+------------+     
iv. Provide the SQL code you used to create your final dataset:

SELECT category.category, 
       count(business.id) num_business, 
       round(avg(business.stars),2) avg_stars, 
       round(avg(business.is_open),2) avg_isopen
FROM (business INNER JOIN category ON business.id = category.business_id)
GROUP BY category.category
HAVING num_business > 10
ORDER BY avg_stars DESC, avg_isopen DESC


